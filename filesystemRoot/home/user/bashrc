#!/bin/bash
# File_Rel_Path: 'filesystemRoot/home/user/bashrc'
# File_Type: '.sh'
# Squash_Source: 'c3c94ba38425135a53c45b7512332b37321a8eda'

# Use fastfetch if installed, else neofetch (if that is installed).
if command -v fastfetch &>/dev/null; then
    fastfetch --logo none
elif command -v neofetch &>/dev/null; then
    neofetch --ascii_distro "none"
fi

case $- in
    *i*) ;;
      *) return;;
esac

# Environment variables
HOST_ALIAS=$(hostname)
TEXTC_DIRECTORY="$HOME/.alfe.sh/FaybianScripts/utils"
HISTCONTROL=ignoreboth
HISTSIZE=1000
HISTFILESIZE=2000
HISTTIMEFORMAT="%F %T "
export VIRTUAL_ENV_DISABLE_PROMPT=1

# Shell options
shopt -s histappend
shopt -s checkwinsize

if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        color_prompt=yes
    else
        color_prompt=
    fi
fi

git_prompt_info() {
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        return
    fi

    local branch=$(git symbolic-ref --short HEAD 2>/dev/null)
    local color status_output timestamp hash
    timestamp=$(git show -s --format=%cd --date=format-local:'%m/%d/%y %H:%M' HEAD 2>/dev/null)
    hash=$(git rev-parse --short HEAD 2>/dev/null)
    status_output=$(git status --porcelain 2>/dev/null)

    if [ -z "$status_output" ] && git status | grep -q "Your branch is up to date with"; then
        color="\[\033[01;32m\]"  # Green
        echo -n "${color}($hash, $branch, clean, $timestamp)\[\033[00m\]"
    else
        color="\[\033[01;33m\]"  # Orange
        local num_changes=$(echo "$status_output" | wc -l | tr -d ' ')
        echo -n "${color}($hash, $branch, ${num_changes} changes, $timestamp)\[\033[00m\]"
    fi
}

update_window_title() {
    local home="${HOME%/}"

    if [[ "$PWD" == "$home" ]]; then
        SHORT_PWD="~"
    elif [[ "$PWD" == "$home/"* ]]; then
        SHORT_PWD="~/${PWD#$home/}"
    else
        SHORT_PWD="$PWD"
    fi

    TITLE="$USER@$HOSTNAME:${SHORT_PWD}$"
    PS1="${VIRTUAL_ENV_PROMPT}${debian_chroot:+($debian_chroot)}\[\033[90m\]\$(date '+%m/%d/%y %H:%M:%S')\[\033[00m\] \[\033[01;32m\]\u@$HOST_ALIAS\$(git_prompt_info)\[\033[00m\]\n:\[\033[01;34m\]${SHORT_PWD}\[\033[00m\]\$ "

    if [[ -n "$TITLE_OVERRIDE" ]]; then
        TITLE="$TITLE_OVERRIDE"
    fi

    echo -ne "\033]0;$TITLE\007"
}

set_title() {
    TITLE_OVERRIDE="$*"
    update_window_title
}

PROMPT_COMMAND="update_window_title"

update_window_title

# Alias, utilities and functions (unchanged, abbreviated here)
alias c='clear'
alias cl='clear'
alias cx='chmod +x'
alias kdirstat='qdirstat'

cd() {
    local old_cwd="$PWD"
    builtin cd "$@" && pwd && ls
}

nano() {
    command nano "$@"
}

alias n='nano'

echo "-------------"
$TEXTC_DIRECTORY/textc.sh --color darkred --text "Language Versions:"
echo "Node.js version: $(node -v)"
echo ""

d() {
    echo "-------------"
    $TEXTC_DIRECTORY/textc.sh --color darkred --text "Filesystem:"
    df -h | awk 'NR>1 && ($NF=="/" || $NF ~ /^\/mnt/)'
    echo ""
}
d

pd() {
    echo "-------------"
    $TEXTC_DIRECTORY/textc.sh --color darkred --text "Git Status:"
    git status
    echo ""
    git log -n 3 --pretty=format:'%H %ai %an <%ae> %s' --abbrev-commit
    git remote -v
    echo ""
    echo "-------------"
    $TEXTC_DIRECTORY/textc.sh --color darkred --text "Current Directory:"
    pwd
    echo "-------------"
}
pd

alias gitf='git f'
alias e='exit'

# All functions, aliases and additional behavior (unchanged/abbreviated)

trap 'preexec_invoke_exec' DEBUG
